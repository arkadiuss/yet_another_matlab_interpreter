
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'left-\'left+-left*/leftDOTADDDOTSUBleftDOTMULDOTDIVADDASSIGN BREAK COMMENT CONTINUE DIVASSIGN DOTADD DOTDIV DOTMUL DOTSUB ELSE EQUALS EYE FLONUM FOR GREATEREQUAL ID IF INTNUM LOWEREQUAL MULASSIGN NOTEQUALS ONES PRINT RETURN STRING SUBASSIGN WHILE ZEROSprogram : instructions_optinstructions_opt : instructionsinstructions_block : \'{\' instructions \'}\'instructions : instruction instructions\n                    | instruction instruction : assignment \';\'\n                   | if_instruction\n                   | for_instruction\n                   | while_instruction\n                   | print_instruction\n                   | loop_instruction\n                   | return_instruction\n                   | instructions_blockif_instruction : IF \'(\' relational_expr \')\' instructions_block\n                      | IF \'(\' relational_expr \')\' instructionif_instruction : IF \'(\' relational_expr \')\' instructions_block ELSE instruction\n                      | IF \'(\' relational_expr \')\' instruction ELSE instructionfor_instruction : FOR ID \'=\' expr \':\' expr instructions_block\n                       | FOR ID \'=\' expr \':\' expr instruction while_instruction : WHILE \'(\' relational_expr \')\' instructions_block\n                         | WHILE \'(\' relational_expr \')\' instructionloop_instruction : BREAK \';\'\n                        | CONTINUE \';\' return_instruction : RETURN expr \';\'print_instruction : PRINT args_list \';\'args_list : args_list \',\' expr\n                  | args_list \',\' stringargs_list : expr\n                  | stringassignment : ID \'=\' token\n                  | ID ADDASSIGN token\n                  | ID SUBASSIGN token\n                  | ID MULASSIGN token\n                  | ID DIVASSIGN tokenassignment : MID \'=\' elemtoken : IDtoken : int\n             | float\n             | matrix\n             | expr\n             | matrix_expr\n             | unary_expr expr : expr \'+\' term\n            | expr \'-\' term\n            | term term : term \'*\' factor\n            | term \'/\' factor\n            | factorfactor : \'(\' expr \')\'\n              | elem relational_expr : expr GREATEREQUAL expr\n                       | expr EQUALS expr \n                       | expr NOTEQUALS expr\n                       | expr LOWEREQUAL expr\n                       | expr \'<\' expr\n                       | expr \'>\' exprMID : ID \'[\' INTNUM \',\' INTNUM \']\' matrix : \'[\' outerlist \']\' matrix : ONES \'(\' args_list \')\'matrix : ZEROS \'(\' args_list \')\'matrix : EYE \'(\' args_list \')\'vector : \'[\' innerlist \']\'outerlist : outerlist \';\' innerlistouterlist : innerlist innerlist : innerlist \',\' eleminnerlist : eleminnerlist : elem : IDelem : int\n            | floatmatrix_expr : matrix_expr DOTADD matrix_term\n                   | matrix_expr DOTSUB matrix_term\n                   | matrix_termmatrix_term : matrix_term DOTMUL matrix_factor\n                   | matrix_term DOTDIV matrix_factor\n                   | matrix_factormatrix_factor : \'(\' matrix_expr \')\'\n                     | matrixmatrix_factor : IDunary_expr : \'-\' expr\n                  | matrix_expr "\'" int : INTNUM float : FLONUMstring : STRING'
    
_lr_action_items = {'ID':([0,4,6,7,8,9,10,11,12,16,18,21,22,24,25,26,27,28,29,31,32,34,38,40,41,42,43,44,45,46,47,48,49,60,62,65,76,78,79,80,81,82,83,85,86,87,88,93,97,98,100,101,103,104,105,106,107,108,109,111,114,115,116,117,118,120,124,125,133,134,141,142,143,150,151,152,153,154,155,156,],[13,13,-7,-8,-9,-10,-11,-12,-13,33,43,43,13,-6,52,52,52,52,52,43,43,43,-45,-48,43,-50,-68,-69,-70,-82,-83,-22,-23,43,96,43,43,-25,43,43,43,43,43,-24,-3,121,121,43,43,43,121,121,13,43,43,43,43,43,43,13,-43,-44,-46,-47,-49,121,43,43,-13,-15,43,-13,-21,13,13,13,-16,-17,-13,-19,]),'IF':([0,4,6,7,8,9,10,11,12,22,24,38,40,42,43,44,45,46,47,48,49,78,85,86,103,111,114,115,116,117,118,133,134,142,143,150,151,152,153,154,155,156,],[15,15,-7,-8,-9,-10,-11,-12,-13,15,-6,-45,-48,-50,-68,-69,-70,-82,-83,-22,-23,-25,-24,-3,15,15,-43,-44,-46,-47,-49,-13,-15,-13,-21,15,15,15,-16,-17,-13,-19,]),'FOR':([0,4,6,7,8,9,10,11,12,22,24,38,40,42,43,44,45,46,47,48,49,78,85,86,103,111,114,115,116,117,118,133,134,142,143,150,151,152,153,154,155,156,],[16,16,-7,-8,-9,-10,-11,-12,-13,16,-6,-45,-48,-50,-68,-69,-70,-82,-83,-22,-23,-25,-24,-3,16,16,-43,-44,-46,-47,-49,-13,-15,-13,-21,16,16,16,-16,-17,-13,-19,]),'WHILE':([0,4,6,7,8,9,10,11,12,22,24,38,40,42,43,44,45,46,47,48,49,78,85,86,103,111,114,115,116,117,118,133,134,142,143,150,151,152,153,154,155,156,],[17,17,-7,-8,-9,-10,-11,-12,-13,17,-6,-45,-48,-50,-68,-69,-70,-82,-83,-22,-23,-25,-24,-3,17,17,-43,-44,-46,-47,-49,-13,-15,-13,-21,17,17,17,-16,-17,-13,-19,]),'PRINT':([0,4,6,7,8,9,10,11,12,22,24,38,40,42,43,44,45,46,47,48,49,78,85,86,103,111,114,115,116,117,118,133,134,142,143,150,151,152,153,154,155,156,],[18,18,-7,-8,-9,-10,-11,-12,-13,18,-6,-45,-48,-50,-68,-69,-70,-82,-83,-22,-23,-25,-24,-3,18,18,-43,-44,-46,-47,-49,-13,-15,-13,-21,18,18,18,-16,-17,-13,-19,]),'BREAK':([0,4,6,7,8,9,10,11,12,22,24,38,40,42,43,44,45,46,47,48,49,78,85,86,103,111,114,115,116,117,118,133,134,142,143,150,151,152,153,154,155,156,],[19,19,-7,-8,-9,-10,-11,-12,-13,19,-6,-45,-48,-50,-68,-69,-70,-82,-83,-22,-23,-25,-24,-3,19,19,-43,-44,-46,-47,-49,-13,-15,-13,-21,19,19,19,-16,-17,-13,-19,]),'CONTINUE':([0,4,6,7,8,9,10,11,12,22,24,38,40,42,43,44,45,46,47,48,49,78,85,86,103,111,114,115,116,117,118,133,134,142,143,150,151,152,153,154,155,156,],[20,20,-7,-8,-9,-10,-11,-12,-13,20,-6,-45,-48,-50,-68,-69,-70,-82,-83,-22,-23,-25,-24,-3,20,20,-43,-44,-46,-47,-49,-13,-15,-13,-21,20,20,20,-16,-17,-13,-19,]),'RETURN':([0,4,6,7,8,9,10,11,12,22,24,38,40,42,43,44,45,46,47,48,49,78,85,86,103,111,114,115,116,117,118,133,134,142,143,150,151,152,153,154,155,156,],[21,21,-7,-8,-9,-10,-11,-12,-13,21,-6,-45,-48,-50,-68,-69,-70,-82,-83,-22,-23,-25,-24,-3,21,21,-43,-44,-46,-47,-49,-13,-15,-13,-21,21,21,21,-16,-17,-13,-19,]),'{':([0,4,6,7,8,9,10,11,12,22,24,38,40,42,43,44,45,46,47,48,49,78,85,86,103,111,114,115,116,117,118,133,134,142,143,150,151,152,153,154,155,156,],[22,22,-7,-8,-9,-10,-11,-12,-13,22,-6,-45,-48,-50,-68,-69,-70,-82,-83,-22,-23,-25,-24,-3,22,22,-43,-44,-46,-47,-49,-13,-15,-13,-21,22,22,22,-16,-17,-13,-19,]),'$end':([1,2,3,4,6,7,8,9,10,11,12,23,24,48,49,78,85,86,133,134,142,143,153,154,155,156,],[0,-1,-2,-5,-7,-8,-9,-10,-11,-12,-13,-4,-6,-22,-23,-25,-24,-3,-13,-15,-13,-21,-16,-17,-13,-19,]),'}':([4,6,7,8,9,10,11,12,23,24,48,49,51,78,85,86,133,134,142,143,153,154,155,156,],[-5,-7,-8,-9,-10,-11,-12,-13,-4,-6,-22,-23,86,-25,-24,-3,-13,-15,-13,-21,-16,-17,-13,-19,]),';':([5,19,20,35,36,37,38,39,40,42,43,44,45,46,47,50,52,53,54,55,56,57,58,59,60,66,67,68,69,70,71,73,89,90,91,92,95,99,112,113,114,115,116,117,118,119,121,122,123,124,127,130,131,144,145,146,147,148,],[24,48,49,78,-28,-29,-45,-84,-48,-50,-68,-69,-70,-82,-83,85,-36,-30,-37,-38,-39,-40,-41,-42,-67,-73,-76,-31,-32,-33,-34,-35,-81,124,-64,-66,-78,-80,-26,-27,-43,-44,-46,-47,-49,-71,-79,-72,-58,-67,-77,-74,-75,-63,-65,-59,-60,-61,]),'ELSE':([6,7,8,9,10,11,12,24,48,49,78,85,86,133,134,142,143,153,154,155,156,],[-7,-8,-9,-10,-11,-12,-13,-6,-22,-23,-25,-24,-3,150,151,-13,-21,-16,-17,-13,-19,]),'=':([13,14,33,149,],[25,31,76,-57,]),'ADDASSIGN':([13,],[26,]),'SUBASSIGN':([13,],[27,]),'MULASSIGN':([13,],[28,]),'DIVASSIGN':([13,],[29,]),'[':([13,25,26,27,28,29,62,87,88,100,101,120,],[30,60,60,60,60,60,60,60,60,60,60,60,]),'(':([15,17,18,21,25,26,27,28,29,32,34,41,61,62,63,64,65,76,79,80,81,82,83,87,88,93,97,98,100,101,104,105,106,107,108,109,120,141,],[32,34,41,41,62,62,62,62,62,41,41,41,93,62,97,98,41,41,41,41,41,41,41,120,120,41,41,41,120,120,41,41,41,41,41,41,120,41,]),'STRING':([18,79,93,97,98,],[39,39,39,39,39,]),'INTNUM':([18,21,25,26,27,28,29,30,31,32,34,41,60,62,65,76,79,80,81,82,83,93,97,98,102,104,105,106,107,108,109,124,125,141,],[46,46,46,46,46,46,46,72,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,132,46,46,46,46,46,46,46,46,46,]),'FLONUM':([18,21,25,26,27,28,29,31,32,34,41,60,62,65,76,79,80,81,82,83,93,97,98,104,105,106,107,108,109,124,125,141,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'ONES':([25,26,27,28,29,62,87,88,100,101,120,],[61,61,61,61,61,61,61,61,61,61,61,]),'ZEROS':([25,26,27,28,29,62,87,88,100,101,120,],[63,63,63,63,63,63,63,63,63,63,63,]),'EYE':([25,26,27,28,29,62,87,88,100,101,120,],[64,64,64,64,64,64,64,64,64,64,64,]),'-':([25,26,27,28,29,36,38,40,42,43,44,45,46,47,50,52,54,55,57,75,84,96,99,110,112,114,115,116,117,118,135,136,137,138,139,140,152,],[65,65,65,65,65,81,-45,-48,-50,-68,-69,-70,-82,-83,81,-68,-69,-70,81,81,81,-68,81,81,81,-43,-44,-46,-47,-49,81,81,81,81,81,81,81,]),',':([35,36,37,38,39,40,42,43,44,45,46,47,60,72,91,92,112,113,114,115,116,117,118,124,126,128,129,144,145,],[79,-28,-29,-45,-84,-48,-50,-68,-69,-70,-82,-83,-67,102,125,-66,-26,-27,-43,-44,-46,-47,-49,-67,79,79,79,125,-65,]),')':([36,37,38,39,40,42,43,44,45,46,47,66,67,74,77,84,94,95,96,112,113,114,115,116,117,118,119,121,122,123,126,127,128,129,130,131,135,136,137,138,139,140,146,147,148,],[-28,-29,-45,-84,-48,-50,-68,-69,-70,-82,-83,-73,-76,103,111,118,127,-78,-68,-26,-27,-43,-44,-46,-47,-49,-71,-79,-72,-58,146,-77,147,148,-74,-75,-51,-52,-53,-54,-55,-56,-59,-60,-61,]),'+':([36,38,40,42,43,44,45,46,47,50,52,54,55,57,75,84,96,99,110,112,114,115,116,117,118,135,136,137,138,139,140,152,],[80,-45,-48,-50,-68,-69,-70,-82,-83,80,-68,-69,-70,80,80,80,-68,80,80,80,-43,-44,-46,-47,-49,80,80,80,80,80,80,80,]),'GREATEREQUAL':([38,40,42,43,44,45,46,47,75,114,115,116,117,118,],[-45,-48,-50,-68,-69,-70,-82,-83,104,-43,-44,-46,-47,-49,]),'EQUALS':([38,40,42,43,44,45,46,47,75,114,115,116,117,118,],[-45,-48,-50,-68,-69,-70,-82,-83,105,-43,-44,-46,-47,-49,]),'NOTEQUALS':([38,40,42,43,44,45,46,47,75,114,115,116,117,118,],[-45,-48,-50,-68,-69,-70,-82,-83,106,-43,-44,-46,-47,-49,]),'LOWEREQUAL':([38,40,42,43,44,45,46,47,75,114,115,116,117,118,],[-45,-48,-50,-68,-69,-70,-82,-83,107,-43,-44,-46,-47,-49,]),'<':([38,40,42,43,44,45,46,47,75,114,115,116,117,118,],[-45,-48,-50,-68,-69,-70,-82,-83,108,-43,-44,-46,-47,-49,]),'>':([38,40,42,43,44,45,46,47,75,114,115,116,117,118,],[-45,-48,-50,-68,-69,-70,-82,-83,109,-43,-44,-46,-47,-49,]),':':([38,40,42,43,44,45,46,47,110,114,115,116,117,118,],[-45,-48,-50,-68,-69,-70,-82,-83,141,-43,-44,-46,-47,-49,]),'*':([38,40,42,43,44,45,46,47,52,54,55,96,114,115,116,117,118,],[82,-48,-50,-68,-69,-70,-82,-83,-68,-69,-70,-68,82,82,-46,-47,-49,]),'/':([38,40,42,43,44,45,46,47,52,54,55,96,114,115,116,117,118,],[83,-48,-50,-68,-69,-70,-82,-83,-68,-69,-70,-68,83,83,-46,-47,-49,]),']':([43,44,45,46,47,60,90,91,92,124,132,144,145,],[-68,-69,-70,-82,-83,-67,123,-64,-66,-67,149,-63,-65,]),'DOTMUL':([52,56,66,67,95,96,119,121,122,123,127,130,131,146,147,148,],[-79,-78,100,-76,-78,-79,100,-79,100,-58,-77,-74,-75,-59,-60,-61,]),'DOTDIV':([52,56,66,67,95,96,119,121,122,123,127,130,131,146,147,148,],[-79,-78,101,-76,-78,-79,101,-79,101,-58,-77,-74,-75,-59,-60,-61,]),'DOTADD':([52,56,58,66,67,94,95,96,119,121,122,123,127,130,131,146,147,148,],[-79,-78,87,-73,-76,87,-78,-79,-71,-79,-72,-58,-77,-74,-75,-59,-60,-61,]),'DOTSUB':([52,56,58,66,67,94,95,96,119,121,122,123,127,130,131,146,147,148,],[-79,-78,88,-73,-76,88,-78,-79,-71,-79,-72,-58,-77,-74,-75,-59,-60,-61,]),"'":([52,56,58,66,67,95,119,121,122,123,127,130,131,146,147,148,],[-79,-78,89,-73,-76,-78,-71,-79,-72,-58,-77,-74,-75,-59,-60,-61,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'instructions_opt':([0,],[2,]),'instructions':([0,4,22,],[3,23,51,]),'instruction':([0,4,22,103,111,150,151,152,],[4,4,4,134,143,153,154,156,]),'assignment':([0,4,22,103,111,150,151,152,],[5,5,5,5,5,5,5,5,]),'if_instruction':([0,4,22,103,111,150,151,152,],[6,6,6,6,6,6,6,6,]),'for_instruction':([0,4,22,103,111,150,151,152,],[7,7,7,7,7,7,7,7,]),'while_instruction':([0,4,22,103,111,150,151,152,],[8,8,8,8,8,8,8,8,]),'print_instruction':([0,4,22,103,111,150,151,152,],[9,9,9,9,9,9,9,9,]),'loop_instruction':([0,4,22,103,111,150,151,152,],[10,10,10,10,10,10,10,10,]),'return_instruction':([0,4,22,103,111,150,151,152,],[11,11,11,11,11,11,11,11,]),'instructions_block':([0,4,22,103,111,150,151,152,],[12,12,12,133,142,12,12,155,]),'MID':([0,4,22,103,111,150,151,152,],[14,14,14,14,14,14,14,14,]),'args_list':([18,93,97,98,],[35,126,128,129,]),'expr':([18,21,25,26,27,28,29,32,34,41,62,65,76,79,93,97,98,104,105,106,107,108,109,141,],[36,50,57,57,57,57,57,75,75,84,84,99,110,112,36,36,36,135,136,137,138,139,140,152,]),'string':([18,79,93,97,98,],[37,113,37,37,37,]),'term':([18,21,25,26,27,28,29,32,34,41,62,65,76,79,80,81,93,97,98,104,105,106,107,108,109,141,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,114,115,38,38,38,38,38,38,38,38,38,38,]),'factor':([18,21,25,26,27,28,29,32,34,41,62,65,76,79,80,81,82,83,93,97,98,104,105,106,107,108,109,141,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,116,117,40,40,40,40,40,40,40,40,40,40,]),'elem':([18,21,25,26,27,28,29,31,32,34,41,60,62,65,76,79,80,81,82,83,93,97,98,104,105,106,107,108,109,124,125,141,],[42,42,42,42,42,42,42,73,42,42,42,92,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,92,145,42,]),'int':([18,21,25,26,27,28,29,31,32,34,41,60,62,65,76,79,80,81,82,83,93,97,98,104,105,106,107,108,109,124,125,141,],[44,44,54,54,54,54,54,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'float':([18,21,25,26,27,28,29,31,32,34,41,60,62,65,76,79,80,81,82,83,93,97,98,104,105,106,107,108,109,124,125,141,],[45,45,55,55,55,55,55,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'token':([25,26,27,28,29,],[53,68,69,70,71,]),'matrix':([25,26,27,28,29,62,87,88,100,101,120,],[56,56,56,56,56,95,95,95,95,95,95,]),'matrix_expr':([25,26,27,28,29,62,120,],[58,58,58,58,58,94,94,]),'unary_expr':([25,26,27,28,29,],[59,59,59,59,59,]),'matrix_term':([25,26,27,28,29,62,87,88,120,],[66,66,66,66,66,66,119,122,66,]),'matrix_factor':([25,26,27,28,29,62,87,88,100,101,120,],[67,67,67,67,67,67,67,67,130,131,67,]),'relational_expr':([32,34,],[74,77,]),'outerlist':([60,],[90,]),'innerlist':([60,124,],[91,144,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> instructions_opt','program',1,'p_program','Mparser.py',27),
  ('instructions_opt -> instructions','instructions_opt',1,'p_instructions_opt','Mparser.py',31),
  ('instructions_block -> { instructions }','instructions_block',3,'p_instructions_block','Mparser.py',35),
  ('instructions -> instruction instructions','instructions',2,'p_instructions','Mparser.py',39),
  ('instructions -> instruction','instructions',1,'p_instructions','Mparser.py',40),
  ('instruction -> assignment ;','instruction',2,'p_instruction_1','Mparser.py',44),
  ('instruction -> if_instruction','instruction',1,'p_instruction_1','Mparser.py',45),
  ('instruction -> for_instruction','instruction',1,'p_instruction_1','Mparser.py',46),
  ('instruction -> while_instruction','instruction',1,'p_instruction_1','Mparser.py',47),
  ('instruction -> print_instruction','instruction',1,'p_instruction_1','Mparser.py',48),
  ('instruction -> loop_instruction','instruction',1,'p_instruction_1','Mparser.py',49),
  ('instruction -> return_instruction','instruction',1,'p_instruction_1','Mparser.py',50),
  ('instruction -> instructions_block','instruction',1,'p_instruction_1','Mparser.py',51),
  ('if_instruction -> IF ( relational_expr ) instructions_block','if_instruction',5,'p_if_instruction_1','Mparser.py',55),
  ('if_instruction -> IF ( relational_expr ) instruction','if_instruction',5,'p_if_instruction_1','Mparser.py',56),
  ('if_instruction -> IF ( relational_expr ) instructions_block ELSE instruction','if_instruction',7,'p_if_instruction_2','Mparser.py',60),
  ('if_instruction -> IF ( relational_expr ) instruction ELSE instruction','if_instruction',7,'p_if_instruction_2','Mparser.py',61),
  ('for_instruction -> FOR ID = expr : expr instructions_block','for_instruction',7,'p_for_instruction','Mparser.py',65),
  ('for_instruction -> FOR ID = expr : expr instruction','for_instruction',7,'p_for_instruction','Mparser.py',66),
  ('while_instruction -> WHILE ( relational_expr ) instructions_block','while_instruction',5,'p_while_instruction','Mparser.py',70),
  ('while_instruction -> WHILE ( relational_expr ) instruction','while_instruction',5,'p_while_instruction','Mparser.py',71),
  ('loop_instruction -> BREAK ;','loop_instruction',2,'p_loop_intruction','Mparser.py',75),
  ('loop_instruction -> CONTINUE ;','loop_instruction',2,'p_loop_intruction','Mparser.py',76),
  ('return_instruction -> RETURN expr ;','return_instruction',3,'p_return_instruction','Mparser.py',80),
  ('print_instruction -> PRINT args_list ;','print_instruction',3,'p_print_instruction','Mparser.py',84),
  ('args_list -> args_list , expr','args_list',3,'p_args_list_1','Mparser.py',88),
  ('args_list -> args_list , string','args_list',3,'p_args_list_1','Mparser.py',89),
  ('args_list -> expr','args_list',1,'p_args_list_2','Mparser.py',93),
  ('args_list -> string','args_list',1,'p_args_list_2','Mparser.py',94),
  ('assignment -> ID = token','assignment',3,'p_assignment_1','Mparser.py',98),
  ('assignment -> ID ADDASSIGN token','assignment',3,'p_assignment_1','Mparser.py',99),
  ('assignment -> ID SUBASSIGN token','assignment',3,'p_assignment_1','Mparser.py',100),
  ('assignment -> ID MULASSIGN token','assignment',3,'p_assignment_1','Mparser.py',101),
  ('assignment -> ID DIVASSIGN token','assignment',3,'p_assignment_1','Mparser.py',102),
  ('assignment -> MID = elem','assignment',3,'p_assignment_2','Mparser.py',120),
  ('token -> ID','token',1,'p_token_id','Mparser.py',125),
  ('token -> int','token',1,'p_token','Mparser.py',133),
  ('token -> float','token',1,'p_token','Mparser.py',134),
  ('token -> matrix','token',1,'p_token','Mparser.py',135),
  ('token -> expr','token',1,'p_token','Mparser.py',136),
  ('token -> matrix_expr','token',1,'p_token','Mparser.py',137),
  ('token -> unary_expr','token',1,'p_token','Mparser.py',138),
  ('expr -> expr + term','expr',3,'p_expr','Mparser.py',142),
  ('expr -> expr - term','expr',3,'p_expr','Mparser.py',143),
  ('expr -> term','expr',1,'p_expr','Mparser.py',144),
  ('term -> term * factor','term',3,'p_term','Mparser.py',155),
  ('term -> term / factor','term',3,'p_term','Mparser.py',156),
  ('term -> factor','term',1,'p_term','Mparser.py',157),
  ('factor -> ( expr )','factor',3,'p_factor','Mparser.py',173),
  ('factor -> elem','factor',1,'p_factor','Mparser.py',174),
  ('relational_expr -> expr GREATEREQUAL expr','relational_expr',3,'p_relational_expr','Mparser.py',181),
  ('relational_expr -> expr EQUALS expr','relational_expr',3,'p_relational_expr','Mparser.py',182),
  ('relational_expr -> expr NOTEQUALS expr','relational_expr',3,'p_relational_expr','Mparser.py',183),
  ('relational_expr -> expr LOWEREQUAL expr','relational_expr',3,'p_relational_expr','Mparser.py',184),
  ('relational_expr -> expr < expr','relational_expr',3,'p_relational_expr','Mparser.py',185),
  ('relational_expr -> expr > expr','relational_expr',3,'p_relational_expr','Mparser.py',186),
  ('MID -> ID [ INTNUM , INTNUM ]','MID',6,'p_MID','Mparser.py',202),
  ('matrix -> [ outerlist ]','matrix',3,'p_matrix_1','Mparser.py',206),
  ('matrix -> ONES ( args_list )','matrix',4,'p_matrix_2','Mparser.py',213),
  ('matrix -> ZEROS ( args_list )','matrix',4,'p_matrix_3','Mparser.py',217),
  ('matrix -> EYE ( args_list )','matrix',4,'p_matrix_4','Mparser.py',221),
  ('vector -> [ innerlist ]','vector',3,'p_vector','Mparser.py',225),
  ('outerlist -> outerlist ; innerlist','outerlist',3,'p_outerlist_1','Mparser.py',229),
  ('outerlist -> innerlist','outerlist',1,'p_outerlist_2','Mparser.py',233),
  ('innerlist -> innerlist , elem','innerlist',3,'p_innerlist_1','Mparser.py',237),
  ('innerlist -> elem','innerlist',1,'p_innerlist_2','Mparser.py',241),
  ('innerlist -> <empty>','innerlist',0,'p_innerlist_3','Mparser.py',245),
  ('elem -> ID','elem',1,'p_elem_id','Mparser.py',249),
  ('elem -> int','elem',1,'p_elem','Mparser.py',257),
  ('elem -> float','elem',1,'p_elem','Mparser.py',258),
  ('matrix_expr -> matrix_expr DOTADD matrix_term','matrix_expr',3,'p_matrix_expr','Mparser.py',262),
  ('matrix_expr -> matrix_expr DOTSUB matrix_term','matrix_expr',3,'p_matrix_expr','Mparser.py',263),
  ('matrix_expr -> matrix_term','matrix_expr',1,'p_matrix_expr','Mparser.py',264),
  ('matrix_term -> matrix_term DOTMUL matrix_factor','matrix_term',3,'p_matrix_term','Mparser.py',271),
  ('matrix_term -> matrix_term DOTDIV matrix_factor','matrix_term',3,'p_matrix_term','Mparser.py',272),
  ('matrix_term -> matrix_factor','matrix_term',1,'p_matrix_term','Mparser.py',273),
  ('matrix_factor -> ( matrix_expr )','matrix_factor',3,'p_matrix_factor_1','Mparser.py',280),
  ('matrix_factor -> matrix','matrix_factor',1,'p_matrix_factor_1','Mparser.py',281),
  ('matrix_factor -> ID','matrix_factor',1,'p_matrix_factor_2','Mparser.py',288),
  ('unary_expr -> - expr','unary_expr',2,'p_unary_expr','Mparser.py',292),
  ("unary_expr -> matrix_expr '",'unary_expr',2,'p_unary_expr','Mparser.py',293),
  ('int -> INTNUM','int',1,'p_int','Mparser.py',304),
  ('float -> FLONUM','float',1,'p_float','Mparser.py',308),
  ('string -> STRING','string',1,'p_string','Mparser.py',312),
]
