
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'left+-left*/leftDOTADDDOTSUBleftDOTMULDOTDIVADDASSIGN BREAK COMMENT CONTINUE DIVASSIGN DOTADD DOTDIV DOTMUL DOTSUB ELSE EQUALS EYE FLONUM FOR GREATEREQUAL ID IF INTNUM LOWEREQUAL MULASSIGN NOTEQUALS ONES PRINT RETURN STRING SUBASSIGN WHILE ZEROSprogram : instructions_optinstructions_opt : instructions\n                        | instructions_block : \'{\' instructions \'}\'instructions : instructions instruction\n                    | instruction instruction : assignment \';\'\n                   | if_instruction\n                   | for_instruction\n                   | while_instruction\n                   | print_instruction\n                   | loop_instruction\n                   | return_instruction\n                   | instructions_blockif_instruction : IF \'(\' relational_expr \')\' instructions_block\n                      | IF \'(\' relational_expr \')\' instruction\n                      | IF \'(\' relational_expr \')\' instructions_block ELSE instruction\n                      | IF \'(\' relational_expr \')\' instruction ELSE instructionfor_instruction : FOR ID \'=\' INTNUM \':\' ID instructions_block\n                       | FOR ID \'=\' INTNUM \':\' ID instruction\n                       | FOR ID \'=\' ID \':\' ID instructions_block\n                       | FOR ID \'=\' ID \':\' ID instructionwhile_instruction : WHILE \'(\' relational_expr \')\' instructions_block\n                         | WHILE \'(\' relational_expr \')\' instructionloop_instruction : BREAK \';\'\n                        | CONTINUE \';\' return_instruction : RETURN expr \';\'print_instruction : PRINT print_list \';\'print_list : print_list \',\' expr\n                  | print_list \',\' STRING \n                  | expr\n                  | STRINGassignment : ID \'=\' token\n                  | MID \'=\' elem\n                  | ID ADDASSIGN token\n                  | ID SUBASSIGN token\n                  | ID MULASSIGN token\n                  | ID DIVASSIGN tokentoken : IDtoken : INTNUM\n             | FLONUM\n             | matrix\n             | expr\n             | matrix_expr\n             | unary_expr expr : expr \'+\' term\n            | expr \'-\' term\n            | term term : term \'*\' factor\n            | term \'/\' factor\n            | factorfactor : \'(\' expr \')\'\n              | elem relational_expr : expr GREATEREQUAL expr\n                       | expr EQUALS expr \n                       | expr NOTEQUALS expr\n                       | expr LOWEREQUAL expr\n                       | expr \'<\' expr\n                       | expr \'>\' exprMID : ID \'[\' INTNUM \',\' INTNUM \']\' matrix : \'[\' outerlist \']\'\n              | ONES \'(\' INTNUM \')\'\n              | ZEROS \'(\' INTNUM \')\'\n              | EYE \'(\' INTNUM \')\'outerlist : outerlist \';\' innerlist\n                 | innerlistinnerlist : innerlist \',\' elem\n                 | elemelem : IDelem : INTNUM\n            | FLONUMmatrix_expr : matrix_expr DOTADD matrix_term\n                   | matrix_expr DOTSUB matrix_term\n                   | matrix_termmatrix_term : matrix_term DOTMUL matrix_factor\n                   | matrix_term DOTDIV matrix_factor\n                   | matrix_factormatrix_factor : \'(\' matrix_expr \')\'\n                     | matrix \n                     | ID unary_expr : \'-\' ID\n                  | ID "\'" '
    
_lr_action_items = {'$end':([0,1,2,3,4,6,7,8,9,10,11,12,23,24,45,46,75,82,83,131,132,141,142,153,154,155,156,157,158,],[-3,0,-1,-2,-6,-8,-9,-10,-11,-12,-13,-14,-5,-7,-25,-26,-28,-27,-4,-14,-16,-14,-24,-17,-18,-14,-22,-14,-20,]),'ID':([0,3,4,6,7,8,9,10,11,12,16,18,21,22,23,24,25,26,27,28,29,31,32,34,40,45,46,48,57,59,62,73,75,76,77,78,79,80,82,83,85,86,97,98,100,101,102,103,104,105,106,109,118,122,123,131,132,139,140,141,142,149,150,151,152,153,154,155,156,157,158,],[13,13,-6,-8,-9,-10,-11,-12,-13,-14,33,42,42,13,-5,-7,49,49,49,49,49,42,42,42,42,-25,-26,13,42,93,96,107,-28,42,42,42,42,42,-27,-4,119,119,119,119,13,42,42,42,42,42,42,13,119,42,42,-14,-16,151,152,-14,-24,13,13,13,13,-17,-18,-14,-22,-14,-20,]),'IF':([0,3,4,6,7,8,9,10,11,12,22,23,24,45,46,48,75,82,83,100,109,131,132,141,142,149,150,151,152,153,154,155,156,157,158,],[15,15,-6,-8,-9,-10,-11,-12,-13,-14,15,-5,-7,-25,-26,15,-28,-27,-4,15,15,-14,-16,-14,-24,15,15,15,15,-17,-18,-14,-22,-14,-20,]),'FOR':([0,3,4,6,7,8,9,10,11,12,22,23,24,45,46,48,75,82,83,100,109,131,132,141,142,149,150,151,152,153,154,155,156,157,158,],[16,16,-6,-8,-9,-10,-11,-12,-13,-14,16,-5,-7,-25,-26,16,-28,-27,-4,16,16,-14,-16,-14,-24,16,16,16,16,-17,-18,-14,-22,-14,-20,]),'WHILE':([0,3,4,6,7,8,9,10,11,12,22,23,24,45,46,48,75,82,83,100,109,131,132,141,142,149,150,151,152,153,154,155,156,157,158,],[17,17,-6,-8,-9,-10,-11,-12,-13,-14,17,-5,-7,-25,-26,17,-28,-27,-4,17,17,-14,-16,-14,-24,17,17,17,17,-17,-18,-14,-22,-14,-20,]),'PRINT':([0,3,4,6,7,8,9,10,11,12,22,23,24,45,46,48,75,82,83,100,109,131,132,141,142,149,150,151,152,153,154,155,156,157,158,],[18,18,-6,-8,-9,-10,-11,-12,-13,-14,18,-5,-7,-25,-26,18,-28,-27,-4,18,18,-14,-16,-14,-24,18,18,18,18,-17,-18,-14,-22,-14,-20,]),'BREAK':([0,3,4,6,7,8,9,10,11,12,22,23,24,45,46,48,75,82,83,100,109,131,132,141,142,149,150,151,152,153,154,155,156,157,158,],[19,19,-6,-8,-9,-10,-11,-12,-13,-14,19,-5,-7,-25,-26,19,-28,-27,-4,19,19,-14,-16,-14,-24,19,19,19,19,-17,-18,-14,-22,-14,-20,]),'CONTINUE':([0,3,4,6,7,8,9,10,11,12,22,23,24,45,46,48,75,82,83,100,109,131,132,141,142,149,150,151,152,153,154,155,156,157,158,],[20,20,-6,-8,-9,-10,-11,-12,-13,-14,20,-5,-7,-25,-26,20,-28,-27,-4,20,20,-14,-16,-14,-24,20,20,20,20,-17,-18,-14,-22,-14,-20,]),'RETURN':([0,3,4,6,7,8,9,10,11,12,22,23,24,45,46,48,75,82,83,100,109,131,132,141,142,149,150,151,152,153,154,155,156,157,158,],[21,21,-6,-8,-9,-10,-11,-12,-13,-14,21,-5,-7,-25,-26,21,-28,-27,-4,21,21,-14,-16,-14,-24,21,21,21,21,-17,-18,-14,-22,-14,-20,]),'{':([0,3,4,6,7,8,9,10,11,12,22,23,24,45,46,48,75,82,83,100,109,131,132,141,142,149,150,151,152,153,154,155,156,157,158,],[22,22,-6,-8,-9,-10,-11,-12,-13,-14,22,-5,-7,-25,-26,22,-28,-27,-4,22,22,-14,-16,-14,-24,22,22,22,22,-17,-18,-14,-22,-14,-20,]),'}':([4,6,7,8,9,10,11,12,23,24,45,46,48,75,82,83,131,132,141,142,153,154,155,156,157,158,],[-6,-8,-9,-10,-11,-12,-13,-14,-5,-7,-25,-26,83,-28,-27,-4,-14,-16,-14,-24,-17,-18,-14,-22,-14,-20,]),';':([5,19,20,35,36,37,38,39,41,42,43,44,47,49,50,51,52,53,54,55,56,63,64,65,66,67,68,70,84,87,88,89,92,96,110,111,112,113,114,115,116,117,119,120,121,125,128,129,143,144,145,146,147,],[24,45,46,75,-31,-32,-48,-51,-53,-69,-70,-71,82,-39,-33,-40,-41,-42,-43,-44,-45,-74,-77,-35,-36,-37,-38,-34,-82,122,-66,-68,-79,-81,-29,-30,-46,-47,-49,-50,-52,-72,-80,-73,-61,-78,-75,-76,-65,-67,-62,-63,-64,]),'ELSE':([6,7,8,9,10,11,12,24,45,46,75,82,83,131,132,141,142,153,154,155,156,157,158,],[-8,-9,-10,-11,-12,-13,-14,-7,-25,-26,-28,-27,-4,149,150,-14,-24,-17,-18,-14,-22,-14,-20,]),'=':([13,14,33,148,],[25,31,73,-60,]),'ADDASSIGN':([13,],[26,]),'SUBASSIGN':([13,],[27,]),'MULASSIGN':([13,],[28,]),'DIVASSIGN':([13,],[29,]),'[':([13,25,26,27,28,29,59,85,86,97,98,118,],[30,57,57,57,57,57,57,57,57,57,57,57,]),'(':([15,17,18,21,25,26,27,28,29,32,34,40,58,59,60,61,76,77,78,79,80,85,86,97,98,101,102,103,104,105,106,118,],[32,34,40,40,59,59,59,59,59,40,40,40,90,59,94,95,40,40,40,40,40,118,118,118,118,40,40,40,40,40,40,118,]),'STRING':([18,76,],[37,111,]),'INTNUM':([18,21,25,26,27,28,29,30,31,32,34,40,57,59,73,76,77,78,79,80,90,94,95,99,101,102,103,104,105,106,122,123,],[43,43,51,51,51,51,51,69,43,43,43,43,43,43,108,43,43,43,43,43,124,126,127,130,43,43,43,43,43,43,43,43,]),'FLONUM':([18,21,25,26,27,28,29,31,32,34,40,57,59,76,77,78,79,80,101,102,103,104,105,106,122,123,],[44,44,52,52,52,52,52,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'ONES':([25,26,27,28,29,59,85,86,97,98,118,],[58,58,58,58,58,58,58,58,58,58,58,]),'ZEROS':([25,26,27,28,29,59,85,86,97,98,118,],[60,60,60,60,60,60,60,60,60,60,60,]),'EYE':([25,26,27,28,29,59,85,86,97,98,118,],[61,61,61,61,61,61,61,61,61,61,61,]),'-':([25,26,27,28,29,36,38,39,41,42,43,44,47,49,51,52,54,72,81,93,110,112,113,114,115,116,133,134,135,136,137,138,],[62,62,62,62,62,78,-48,-51,-53,-69,-70,-71,78,-69,-70,-71,78,78,78,-69,78,-46,-47,-49,-50,-52,78,78,78,78,78,78,]),',':([35,36,37,38,39,41,42,43,44,69,88,89,110,111,112,113,114,115,116,143,144,],[76,-31,-32,-48,-51,-53,-69,-70,-71,99,123,-68,-29,-30,-46,-47,-49,-50,-52,123,-67,]),'+':([36,38,39,41,42,43,44,47,49,51,52,54,72,81,93,110,112,113,114,115,116,133,134,135,136,137,138,],[77,-48,-51,-53,-69,-70,-71,77,-69,-70,-71,77,77,77,-69,77,-46,-47,-49,-50,-52,77,77,77,77,77,77,]),'GREATEREQUAL':([38,39,41,42,43,44,72,112,113,114,115,116,],[-48,-51,-53,-69,-70,-71,101,-46,-47,-49,-50,-52,]),'EQUALS':([38,39,41,42,43,44,72,112,113,114,115,116,],[-48,-51,-53,-69,-70,-71,102,-46,-47,-49,-50,-52,]),'NOTEQUALS':([38,39,41,42,43,44,72,112,113,114,115,116,],[-48,-51,-53,-69,-70,-71,103,-46,-47,-49,-50,-52,]),'LOWEREQUAL':([38,39,41,42,43,44,72,112,113,114,115,116,],[-48,-51,-53,-69,-70,-71,104,-46,-47,-49,-50,-52,]),'<':([38,39,41,42,43,44,72,112,113,114,115,116,],[-48,-51,-53,-69,-70,-71,105,-46,-47,-49,-50,-52,]),'>':([38,39,41,42,43,44,72,112,113,114,115,116,],[-48,-51,-53,-69,-70,-71,106,-46,-47,-49,-50,-52,]),')':([38,39,41,42,43,44,63,64,71,74,81,91,92,93,112,113,114,115,116,117,119,120,121,124,125,126,127,128,129,133,134,135,136,137,138,145,146,147,],[-48,-51,-53,-69,-70,-71,-74,-77,100,109,116,125,-79,-69,-46,-47,-49,-50,-52,-72,-80,-73,-61,145,-78,146,147,-75,-76,-54,-55,-56,-57,-58,-59,-62,-63,-64,]),'*':([38,39,41,42,43,44,49,51,52,93,112,113,114,115,116,],[79,-51,-53,-69,-70,-71,-69,-70,-71,-69,79,79,-49,-50,-52,]),'/':([38,39,41,42,43,44,49,51,52,93,112,113,114,115,116,],[80,-51,-53,-69,-70,-71,-69,-70,-71,-69,80,80,-49,-50,-52,]),']':([42,43,44,87,88,89,130,143,144,],[-69,-70,-71,121,-66,-68,148,-65,-67,]),"'":([49,],[84,]),'DOTMUL':([49,53,63,64,92,93,117,119,120,121,125,128,129,145,146,147,],[-80,-79,97,-77,-79,-80,97,-80,97,-61,-78,-75,-76,-62,-63,-64,]),'DOTDIV':([49,53,63,64,92,93,117,119,120,121,125,128,129,145,146,147,],[-80,-79,98,-77,-79,-80,98,-80,98,-61,-78,-75,-76,-62,-63,-64,]),'DOTADD':([49,53,55,63,64,91,92,93,117,119,120,121,125,128,129,145,146,147,],[-80,-79,85,-74,-77,85,-79,-80,-72,-80,-73,-61,-78,-75,-76,-62,-63,-64,]),'DOTSUB':([49,53,55,63,64,91,92,93,117,119,120,121,125,128,129,145,146,147,],[-80,-79,86,-74,-77,86,-79,-80,-72,-80,-73,-61,-78,-75,-76,-62,-63,-64,]),':':([107,108,],[139,140,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'instructions_opt':([0,],[2,]),'instructions':([0,22,],[3,48,]),'instruction':([0,3,22,48,100,109,149,150,151,152,],[4,23,4,23,132,142,153,154,156,158,]),'assignment':([0,3,22,48,100,109,149,150,151,152,],[5,5,5,5,5,5,5,5,5,5,]),'if_instruction':([0,3,22,48,100,109,149,150,151,152,],[6,6,6,6,6,6,6,6,6,6,]),'for_instruction':([0,3,22,48,100,109,149,150,151,152,],[7,7,7,7,7,7,7,7,7,7,]),'while_instruction':([0,3,22,48,100,109,149,150,151,152,],[8,8,8,8,8,8,8,8,8,8,]),'print_instruction':([0,3,22,48,100,109,149,150,151,152,],[9,9,9,9,9,9,9,9,9,9,]),'loop_instruction':([0,3,22,48,100,109,149,150,151,152,],[10,10,10,10,10,10,10,10,10,10,]),'return_instruction':([0,3,22,48,100,109,149,150,151,152,],[11,11,11,11,11,11,11,11,11,11,]),'instructions_block':([0,3,22,48,100,109,149,150,151,152,],[12,12,12,12,131,141,12,12,155,157,]),'MID':([0,3,22,48,100,109,149,150,151,152,],[14,14,14,14,14,14,14,14,14,14,]),'print_list':([18,],[35,]),'expr':([18,21,25,26,27,28,29,32,34,40,59,76,101,102,103,104,105,106,],[36,47,54,54,54,54,54,72,72,81,81,110,133,134,135,136,137,138,]),'term':([18,21,25,26,27,28,29,32,34,40,59,76,77,78,101,102,103,104,105,106,],[38,38,38,38,38,38,38,38,38,38,38,38,112,113,38,38,38,38,38,38,]),'factor':([18,21,25,26,27,28,29,32,34,40,59,76,77,78,79,80,101,102,103,104,105,106,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,114,115,39,39,39,39,39,39,]),'elem':([18,21,25,26,27,28,29,31,32,34,40,57,59,76,77,78,79,80,101,102,103,104,105,106,122,123,],[41,41,41,41,41,41,41,70,41,41,41,89,41,41,41,41,41,41,41,41,41,41,41,41,89,144,]),'token':([25,26,27,28,29,],[50,65,66,67,68,]),'matrix':([25,26,27,28,29,59,85,86,97,98,118,],[53,53,53,53,53,92,92,92,92,92,92,]),'matrix_expr':([25,26,27,28,29,59,118,],[55,55,55,55,55,91,91,]),'unary_expr':([25,26,27,28,29,],[56,56,56,56,56,]),'matrix_term':([25,26,27,28,29,59,85,86,118,],[63,63,63,63,63,63,117,120,63,]),'matrix_factor':([25,26,27,28,29,59,85,86,97,98,118,],[64,64,64,64,64,64,64,64,128,129,64,]),'relational_expr':([32,34,],[71,74,]),'outerlist':([57,],[87,]),'innerlist':([57,122,],[88,143,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> instructions_opt','program',1,'p_program','Mparser.py',26),
  ('instructions_opt -> instructions','instructions_opt',1,'p_instructions_opt','Mparser.py',29),
  ('instructions_opt -> <empty>','instructions_opt',0,'p_instructions_opt','Mparser.py',30),
  ('instructions_block -> { instructions }','instructions_block',3,'p_instructions_block','Mparser.py',33),
  ('instructions -> instructions instruction','instructions',2,'p_instructions','Mparser.py',36),
  ('instructions -> instruction','instructions',1,'p_instructions','Mparser.py',37),
  ('instruction -> assignment ;','instruction',2,'p_instruction','Mparser.py',40),
  ('instruction -> if_instruction','instruction',1,'p_instruction','Mparser.py',41),
  ('instruction -> for_instruction','instruction',1,'p_instruction','Mparser.py',42),
  ('instruction -> while_instruction','instruction',1,'p_instruction','Mparser.py',43),
  ('instruction -> print_instruction','instruction',1,'p_instruction','Mparser.py',44),
  ('instruction -> loop_instruction','instruction',1,'p_instruction','Mparser.py',45),
  ('instruction -> return_instruction','instruction',1,'p_instruction','Mparser.py',46),
  ('instruction -> instructions_block','instruction',1,'p_instruction','Mparser.py',47),
  ('if_instruction -> IF ( relational_expr ) instructions_block','if_instruction',5,'p_if_instruction','Mparser.py',50),
  ('if_instruction -> IF ( relational_expr ) instruction','if_instruction',5,'p_if_instruction','Mparser.py',51),
  ('if_instruction -> IF ( relational_expr ) instructions_block ELSE instruction','if_instruction',7,'p_if_instruction','Mparser.py',52),
  ('if_instruction -> IF ( relational_expr ) instruction ELSE instruction','if_instruction',7,'p_if_instruction','Mparser.py',53),
  ('for_instruction -> FOR ID = INTNUM : ID instructions_block','for_instruction',7,'p_for_instruction','Mparser.py',56),
  ('for_instruction -> FOR ID = INTNUM : ID instruction','for_instruction',7,'p_for_instruction','Mparser.py',57),
  ('for_instruction -> FOR ID = ID : ID instructions_block','for_instruction',7,'p_for_instruction','Mparser.py',58),
  ('for_instruction -> FOR ID = ID : ID instruction','for_instruction',7,'p_for_instruction','Mparser.py',59),
  ('while_instruction -> WHILE ( relational_expr ) instructions_block','while_instruction',5,'p_while_instruction','Mparser.py',62),
  ('while_instruction -> WHILE ( relational_expr ) instruction','while_instruction',5,'p_while_instruction','Mparser.py',63),
  ('loop_instruction -> BREAK ;','loop_instruction',2,'p_loop_intruction','Mparser.py',66),
  ('loop_instruction -> CONTINUE ;','loop_instruction',2,'p_loop_intruction','Mparser.py',67),
  ('return_instruction -> RETURN expr ;','return_instruction',3,'p_return_instruction','Mparser.py',70),
  ('print_instruction -> PRINT print_list ;','print_instruction',3,'p_print_instruction','Mparser.py',73),
  ('print_list -> print_list , expr','print_list',3,'p_print_list','Mparser.py',76),
  ('print_list -> print_list , STRING','print_list',3,'p_print_list','Mparser.py',77),
  ('print_list -> expr','print_list',1,'p_print_list','Mparser.py',78),
  ('print_list -> STRING','print_list',1,'p_print_list','Mparser.py',79),
  ('assignment -> ID = token','assignment',3,'p_assignment','Mparser.py',82),
  ('assignment -> MID = elem','assignment',3,'p_assignment','Mparser.py',83),
  ('assignment -> ID ADDASSIGN token','assignment',3,'p_assignment','Mparser.py',84),
  ('assignment -> ID SUBASSIGN token','assignment',3,'p_assignment','Mparser.py',85),
  ('assignment -> ID MULASSIGN token','assignment',3,'p_assignment','Mparser.py',86),
  ('assignment -> ID DIVASSIGN token','assignment',3,'p_assignment','Mparser.py',87),
  ('token -> ID','token',1,'p_token_id','Mparser.py',100),
  ('token -> INTNUM','token',1,'p_token','Mparser.py',108),
  ('token -> FLONUM','token',1,'p_token','Mparser.py',109),
  ('token -> matrix','token',1,'p_token','Mparser.py',110),
  ('token -> expr','token',1,'p_token','Mparser.py',111),
  ('token -> matrix_expr','token',1,'p_token','Mparser.py',112),
  ('token -> unary_expr','token',1,'p_token','Mparser.py',113),
  ('expr -> expr + term','expr',3,'p_expr','Mparser.py',118),
  ('expr -> expr - term','expr',3,'p_expr','Mparser.py',119),
  ('expr -> term','expr',1,'p_expr','Mparser.py',120),
  ('term -> term * factor','term',3,'p_term','Mparser.py',129),
  ('term -> term / factor','term',3,'p_term','Mparser.py',130),
  ('term -> factor','term',1,'p_term','Mparser.py',131),
  ('factor -> ( expr )','factor',3,'p_factor','Mparser.py',140),
  ('factor -> elem','factor',1,'p_factor','Mparser.py',141),
  ('relational_expr -> expr GREATEREQUAL expr','relational_expr',3,'p_relational_expr','Mparser.py',148),
  ('relational_expr -> expr EQUALS expr','relational_expr',3,'p_relational_expr','Mparser.py',149),
  ('relational_expr -> expr NOTEQUALS expr','relational_expr',3,'p_relational_expr','Mparser.py',150),
  ('relational_expr -> expr LOWEREQUAL expr','relational_expr',3,'p_relational_expr','Mparser.py',151),
  ('relational_expr -> expr < expr','relational_expr',3,'p_relational_expr','Mparser.py',152),
  ('relational_expr -> expr > expr','relational_expr',3,'p_relational_expr','Mparser.py',153),
  ('MID -> ID [ INTNUM , INTNUM ]','MID',6,'p_MID','Mparser.py',168),
  ('matrix -> [ outerlist ]','matrix',3,'p_matrix','Mparser.py',171),
  ('matrix -> ONES ( INTNUM )','matrix',4,'p_matrix','Mparser.py',172),
  ('matrix -> ZEROS ( INTNUM )','matrix',4,'p_matrix','Mparser.py',173),
  ('matrix -> EYE ( INTNUM )','matrix',4,'p_matrix','Mparser.py',174),
  ('outerlist -> outerlist ; innerlist','outerlist',3,'p_outerlist','Mparser.py',177),
  ('outerlist -> innerlist','outerlist',1,'p_outerlist','Mparser.py',178),
  ('innerlist -> innerlist , elem','innerlist',3,'p_innerlist','Mparser.py',181),
  ('innerlist -> elem','innerlist',1,'p_innerlist','Mparser.py',182),
  ('elem -> ID','elem',1,'p_elem_id','Mparser.py',185),
  ('elem -> INTNUM','elem',1,'p_elem','Mparser.py',192),
  ('elem -> FLONUM','elem',1,'p_elem','Mparser.py',193),
  ('matrix_expr -> matrix_expr DOTADD matrix_term','matrix_expr',3,'p_matrix_expr','Mparser.py',197),
  ('matrix_expr -> matrix_expr DOTSUB matrix_term','matrix_expr',3,'p_matrix_expr','Mparser.py',198),
  ('matrix_expr -> matrix_term','matrix_expr',1,'p_matrix_expr','Mparser.py',199),
  ('matrix_term -> matrix_term DOTMUL matrix_factor','matrix_term',3,'p_matrix_term','Mparser.py',202),
  ('matrix_term -> matrix_term DOTDIV matrix_factor','matrix_term',3,'p_matrix_term','Mparser.py',203),
  ('matrix_term -> matrix_factor','matrix_term',1,'p_matrix_term','Mparser.py',204),
  ('matrix_factor -> ( matrix_expr )','matrix_factor',3,'p_matrix_factor','Mparser.py',207),
  ('matrix_factor -> matrix','matrix_factor',1,'p_matrix_factor','Mparser.py',208),
  ('matrix_factor -> ID','matrix_factor',1,'p_matrix_factor','Mparser.py',209),
  ('unary_expr -> - ID','unary_expr',2,'p_unary_expr','Mparser.py',212),
  ("unary_expr -> ID '",'unary_expr',2,'p_unary_expr','Mparser.py',213),
]
